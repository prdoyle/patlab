#! /bin/bash

# Patch manager   Patrick Doyle  1 Oct 2007
#set -x
set -e # I'd like to use -E too but it's not available on older bashes

MAJOR_VERSION=0
MINOR_VERSION=7


###########################
##
##  Basic infrastructure
##

INF=999999

function die(){
	echo $* 1>&2
	exit 1
}

function internal_error(){
	echo "INTERNAL ERROR: $*" 1>&2
	exit 1
}

function verbose(){
	echo "$*" 1>&2
	#true
}

function debug(){
	echo "$*" 1>&2
	#true
}

function terse(){
	#echo "$*" 1>&2
	true
}

function version(){
	echo "patman v$MAJOR_VERSION.$MINOR_VERSION  Patrick Doyle"
}

function help_message(){
	version
	cat <<END_OF_HELP
Patch-specific commands:
	begin {PATCH}
		Start working on an (initially empty) patch called {PATCH} with
		the current directory as its root.
	add [-N] {FILE} ...
		Add the given files to the active patch, and mark them writeable.
	sub [-t] [-r] [-d] {FILE} ...
		Remove the given files from the active patch.  If -t is present,
		restore file timestamps.  Files that have been altered will not
		be removed from the patch, unless -r or -d is present: -r will
		behave like "revert" and -d will behave like "discard" (see below).
	files [{PATCH} ...]
		List the files in the active patch.  If {PATCH} is given, lists files in that patch file.
	diff
		Show the changes within the active patch on stdout.
	view {FILE} ...
		Compare the given files before and after the active patch.
		FILE is relative to the patch root directory; that is, the FILE
		argument must be one of the files listed by "patman files".
	save
		Update the active patch to reflect the state of the sandbox.
	push [-N] {PATCH}
		Apply changes from {PATCH} and make it the active patch with
		the current directory as its root.  If the patch doesn't apply
		cleanly, it is considered "incomplete", and only the revert and
		stipulate commands can be used.
	pop [-a] [-t] [{PATCH}]
		Save the active patch, then revert it.  If {PATCH} is present,
		pop that patch and everything above it.  If -t is present,
		restore file timestamps.  If -a is present, pop all patches
		on the stack.  "pop" is equivalent to "save" followed by "revert".   
	top
		Display the name of the active patch.
	root
		Display the root directory of the active patch.
	apply [-N] {PATCH}
		Modify the files according to the contents of {PATCH}, adding
		the affected files to the active patch.
		Differs from "push" because {PATCH} does not become the active
		patch; rather, its changes are assimilated into the active
		patch.  (It's almost like "push PATCH" is equivalent to
		"begin PATCH" followed by "apply PATCH" except that the "begin"
		command fails if the patch already exists.)
	split {PATCH}
		Save the active patch.  Then begin a new patch called {PATCH}.
		Steal all the changes from the formerly active patch (so that
		patch becomes empty) and put them in {PATCH}.  Using the view
		command, you can then modify the "before" version of each file,
		effectively backporting some of the changes back into the
		previously active patch.  This has the effect of dividing the
		active patch into two patches.
		*NOTE*: Only edit the "before" versions of files that have
		actually been added to the previously-active patch.  Editing
		other files could cause you to lose your work.  The files that
		are safe to edit will be marked writable.

Patch stack commands:
	patches [PATCH]
		Display the current patch stack.  Incomplete patches are preceeded by "+".
		-v ("verbose") displays more information, including the list of files in
		each patch.  If PATCH is specified, only patches above PATCH are listed.
		Alias is "ls".
	capture {STACK}
		Save the current stacked patch names to the given stack file.
	shelve {STACK}
		Equivalent to "capture {STACK}" followed by "pop -a".
	revive [-p] {STACK}
		Push all patches in the given stack file.  Refuses to revive a stack file
		if there are already patches on the stack, unless -p is present.
	zip {STACK}
		Pop all patches, then put them in a zip file called {STACK}.zip.
		Analogous to the shelve command.
	unzip [-p] {STACK}
		Unzip {STACK}.zip in the patchfile directory, then push all the patches
		it contains.  Refuses to push if there are already patches on the stack,
		unless -p is present.  Analogous to the revive command.

Maintenance commands:
	init
		Initialize the repository.
	repository
		Display the directory containing the patman repository.
	config
		Give a summary of the configuration patman is currently using.
	revert [-c -t] {PATCH}
		Restore the patch's files to their state when the patch was
		activated.  Works on incomplete patches; to revert a complete
		patch, the -c flag must be given.  {PATCH} must match the name
		of the active patch.  If -t is present, restore file timestamps.  
	stipulate {PATCH}
		Mark an incomlpete patch as being complete.  This is uaually
		done after resolving rejected hunks from a failed push command.
		{PATCH} must match the name of the active patch.
	forget [-a] {PATCH}
		Remove the oldest (bottom) patch from the stack.  Files
		modified by the patch are left unchanged, as is the patch file.
		The given PATCH name mush match the bottom patch on the stack.
		If -a is present, the patch file will be archived.
		This is generally used to remove old patches that are
		considered correct and complete -- often those having been
		checked into an upstream repository.
	discard {PATCH}
		Remove the top patch from the stack.  Files modified by the
		patch are left unchanged, as is the patch file.
		*DANGER* -- This command is usually not what you want because
		it loses all record of what was changed by the top patch;
		however, it may be useful to recover from earlier errors.
	archive {PATCH}
		Move a patch file into the archive/ subdirectory of the
		patchfile directory.  Since this command has no effect on any
		patches on the stack, it can be run even when the top patch is
		incomplete.
	complete {SHELL} {ARGS}
		Perform command-line completion as needed by the given SHELL.
		Currently only "bash" is supported.  To enable command line
		completion for bash, use a completion function containing this:
		  COMPREPLY=(\`patman complete bash \$COMP_CWORD \${COMP_WORDS[@]}\`)
		then specify: complete -o nospace -F {YOUR FUNCTION NAME} patman

	Here is a summary of the top-patch manipulation commands:

		discard	  S
		revert	 FS
		save	U
		pop	UFS

		U: update patch file
		F: restore original files (add -t to restore timestamps)
		S: remove patch from stack

Common options:
	-N
		For files that don't exist, create new empty files.

Environment variables:
	PATMANRC
		This file is sourced before any other action.  Can be used to
		set other environment variables.  Defaults to \$HOME/.patmanrc
	PATMAN_PATCHFILE_DIR
		Directory in which patch files will be stored.
	PATMAN_REPOSITORY
		Location of patman's metadata.  Defaults to \$HOME/.patman

END_OF_HELP
	exit 1
}

# Quiet versions of pushd and popd
function pushdq(){ pushd $* > /dev/null; }
function popdq(){ popd $* > /dev/null; }


###########################
##
##  Helper functions
##

function get_absolute_path(){
	local VAR=$1
	local WHAT=$2
	if [[ "$WHAT" == "${WHAT#/}" ]]; then
		eval $VAR="$PWD/$WHAT"
	else
		eval $VAR="$WHAT"
	fi
}

function common_options(){
	local ALLOWED_OPTIONS="$1"; shift
	TOUCH_NONEXISTENT_FILES="no"
	OPTIND=0
	while getopts "$ALLOWED_OPTIONS" Option; do case $Option in
		N) TOUCH_NONEXISTENT_FILES="yes";; # Reminiscent of diff -N
	esac done
	NUM_COMMON_OPTIONS="$((OPTIND - 1))"
}

function standard_variables(){ # Sets a bunch of variables pertaining to the top patch, or fails if there is no top patch
	PATCH_NAME=`head -n1 $REVERTIBLE`
	TOP_COMPLETED_PATCH_NAME=`head -n1 $STACK`
	if [[ "$1" != "incomplete_is_ok" ]] && [[ "$PATCH_NAME" != "$TOP_COMPLETED_PATCH_NAME" ]]; then
		die "There is an incomplete patch $PATCH_NAME on the stack.  Use the \"revert\" command to remove it."
	fi
	[ "$PATCH_NAME" != "" ] || die "No patches on stack"
	get_absolute_path PATCH_DB "$REPOSITORY/$PATCH_NAME.d"
	test -d $PATCH_DB || internal_error "Invalid patch database directory $PATCH_DB"
	BEFORE_DIR="$PATCH_DB/before"
	AFTER_DIR="$PATCH_DB/after"
	if which readlink > /dev/null; then
		# Don't depend on perl if we don't have to
		PATCH_ROOT=`readlink $AFTER_DIR`
	else
		PATCH_ROOT=`perl -e "print readlink('$AFTER_DIR');"`
	fi
}

function ensure_standard_variables(){
	# This is intended to make sure we don't get very weird errors when the variables aren't defined
	if [[ "$PATCH_NAME" == "" ]]; then
		internal_error "Standard variables not defined"
		#standard_variables
	fi
}

function get_filename_relative_to_root(){
	ensure_standard_variables
	local FILENAME
	get_absolute_path FILENAME $2
	local RESULT=${FILENAME##$PATCH_ROOT/}
	[ "$RESULT" != "$FILENAME" ] || die "File $FILENAME is not under root $PATCH_ROOT"
	eval $1=$RESULT
}

function expand_root_relative_filename(){ # Opposite of get_filename_relative_to_root
	ensure_standard_variables
	local FILENAME="$PATCH_ROOT/$2"
	local PREFIX=${PWD##$PATCH_ROOT/}
	if [[ "$PREFIX" == "$PWD" ]]; then
		# PWD is not under PATCH_ROOT.  Return an absolute path
		eval $1=$FILENAME
	else
		# PWD is under PATCH_ROOT.  Return a relative path
		eval $1=${FILENAME##$PREFIX}
	fi
}

function patch_is_on_stack(){
	grep -qFx "$1" $STACK
}

function get_full_patch_file_name_for(){
	eval $1=$PATCHFILE_DIR/$2$PATCHFILE_SUFFIX
}

function get_full_patch_file_name(){
	ensure_standard_variables
	get_full_patch_file_name_for $1 $PATCH_NAME
}

function files_in_active_patch(){
	( # TODO: I don't remember why this is in its own shell -- could this be avoided by using "local" variables?
	ensure_standard_variables
	CHECK=`ls $BEFORE_DIR/ | head -1` # find doesn't like being given an empty list of places to search
	if [[ "$CHECK" != "" ]]; then
		pushdq $BEFORE_DIR
		find * -type f | sort # sorting normalizes the file order, making it easier to compare patches
		popdq
	fi
	)
}

function files_in_patchfile(){
	cat $* | grep '^---.*[^-]$' | cut -d/ -f$((PATH_STRIP+1))- | cut -f1
}

function files_in_zipfile(){
	unzip -l "$1" '*.patch' | awk '
		BEGIN  { printing=0 }
		FNR==3 { stopAt=$1; printing=1 }
		FNR!=3 { if($1==stopAt){ printing=0 } else if(printing){ print $4 }}'
}

function create_temp_file(){
	local PREFIX=${1:-temp}
	#mktemp "$PATCH_DB/$PREFIX-XXXXXXXXXX"
	local FILE_NAME="$PATCH_DB/$PREFIX-$$-$RANDOM"
	echo "" > $FILE_NAME
	echo $FILE_NAME
}

function diff_files_in_active_patch(){ # Output is on fd #3
	ensure_standard_variables
	local DIFF_OPTS=${*:--u}
	pushdq $PATCH_DB # Doing the diff from here makes the filenames suitable for -p1
	for FILE in `files_in_active_patch`; do
		verbose "diff of $FILE"
		diff $EXTRA_DIFF_OPTS $DIFF_OPTS before/$FILE after/$FILE 1>&3 || if [[ $? != 1 ]]; then die; fi
	done
	popdq
}

function save_top_patch_file(){
	local VERB=${1:-Making}
	ensure_standard_variables
	get_full_patch_file_name TARGET
	local TEMP=`create_temp_file patch`
	diff_files_in_active_patch 3> $TEMP
	mv $TEMP $TARGET # We do this last so we don't kill $TARGET if there's an error
}

# These "ex" commands aren't great.  They return a spurious error code on some
# systems, and on linux it seems to dump a carriage-return to stderr.  I'd like
# to find an alternative to edit a file in-place.
function remove_first_line(){ echo -e '1d\nwq' | ex $1 2> /dev/null || true; }
function remove_last_line (){ echo -e '$d\nwq' | ex $1 2> /dev/null || true; }

function prepend_line(){
	local LINE="$1"
	local FILE="$2"
	local TEMP=`create_temp_file prepend`
	cp -f $FILE $TEMP
	echo -e "$LINE" | cat - $TEMP > $FILE
	rm $TEMP
}

function chmod_files(){
	ensure_standard_variables
	for FILE in `files_in_active_patch`; do
		chmod $* $AFTER_DIR/$FILE
	done
}

function begin_patch(){
	if [ -s $STACK ]; then # Save the active patch, then mark files from existing patch read-only
		standard_variables
		if [[ "$1" == "-s" ]]; then
			save_top_patch_file
			shift
		fi
		chmod_files "a-w"
	fi
	local PATCH_NAME=$1
	local PATCH_DB="$REPOSITORY/$PATCH_NAME.d"
	local PATCHFILE="$PATCHFILE_DIR/$PATCH_NAME$PATCHFILE_SUFFIX"
	[[ "$PATCH_NAME" != "-" ]] || die "'-' is not a legal patch name; can't push a patch from stdin"
	if [ -e $PATCHFILE ] && [[ "$2" != "ok_to_overwrite" ]]; then
		die "Cannot begin $PATCH_NAME -- $PATCHFILE already exists"
	fi
	mkdir $PATCH_DB || die "Cannot create new patch-db $PATCH_DB"
	mkdir $PATCH_DB/before
	prepend_line $PATCH_NAME $REVERTIBLE
	ln -s $PWD $PATCH_DB/after
}

function add_files_to_active_patch(){
	ensure_standard_variables
	for FILE; do
		get_filename_relative_to_root RELATIVE_NAME $FILE
		local BACKUP="$BEFORE_DIR/$RELATIVE_NAME"
		if [ -e "$BACKUP" ]; then die "$FILE has already been added"; fi
		if [ ! -e "$FILE" ]; then
			[[ "$TOUCH_NONEXISTENT_FILES" == "yes" ]] || dir "$FILE does not exist"
			touch $FILE
		fi
		mkdir -p $(dirname $BACKUP)
		cp -p $FILE $BACKUP
		chmod +w $FILE
		verbose "added $RELATIVE_NAME"
	done
}

function restore_files_from_before(){
	local TOUCH=$1; shift
	ensure_standard_variables incomplete_is_ok
	for FILE; do # TODO: This whole copying process should succeed or fail as a unit
		mv -f $BEFORE_DIR/$FILE $PATCH_ROOT/$FILE
		if [[ $TOUCH == "touch" ]]; then
			touch $PATCH_ROOT/$FILE
		fi
		verbose "restored $FILE"
	done
}

function delete_patch_db(){
	# Rather than just deleting the patch database, this keeps a backup of the previously-deleted database
	# TODO: Is there really a point in backing it up now that CMD_pop uses mv instead of cp?
	ensure_standard_variables
	for NAME; do
		local BACKUP_DIR="$REPOSITORY/.backups/$NAME.d"
		if [ -d "$BACKUP_DIR" ]; then
			chmod -R +w $BACKUP_DIR/before # This lets us delete it without rm -rf despite read-only files in the before dir
			rm -r $BACKUP_DIR
		fi
		get_absolute_path DB "$REPOSITORY/$NAME.d"
		mv $DB $BACKUP_DIR
	done
}

function remove_top_patch_db(){
	# top patch must have already been removed from $STACK
	remove_first_line $REVERTIBLE
	delete_patch_db $PATCH_NAME
	if [ -s $STACK ]; then # Mark files from newly-exposed patch writeable
		standard_variables
		chmod_files "+w"
	fi
}

##  Inner loops of the various top-patch manipulation commands

function discard_top_patch(){
	ensure_standard_variables
	verbose "Discarding $PATCH"
	remove_first_line $STACK
	remove_top_patch_db
}

# revert is more complex because it can operate on incomplete patches

function save_top_patch(){
	ensure_standard_variables
	get_full_patch_file_name TARGET
	verbose "Saving $PATCH to $TARGET {"
	save_top_patch_file
	verbose "} done."
}

function pop_top_patch(){
	ensure_standard_variables
	local TOUCH=${1:-"no-touch"}
	get_full_patch_file_name TARGET
	verbose "Popping $PATCH to $TARGET {"
	save_top_patch_file
	remove_first_line $STACK
	restore_files_from_before $TOUCH `files_in_active_patch`
	remove_top_patch_db
	verbose "} done."
}

function apply_blame(){
	awk '
		{ FS=""; OFS="" }
		/^[-][^-]/{ $1="-'$1'" }
		/^[+][^+]/{ $1="+'$2'" }
		{ print }'
}


###########################
##
##  Command implementations
##

function CMD_add(){
	standard_variables
	common_options "N" $*
	shift $NUM_COMMON_OPTIONS
	verbose "Adding files to $PATCH_NAME {"
	add_files_to_active_patch $*
	verbose "} done."
	terse $PATCH_NAME
}

function CMD_sub(){
	standard_variables
	local REVERT_IF_DIFFERENT="no"
	local DISCARD_IF_DIFFERENT="no"
	local TOUCH="touch"
	OPTIND=0
	while getopts "rdt" Option; do case $Option in
		r) REVERT_IF_DIFFERENT="yes";;
		d) DISCARD_IF_DIFFERENT="yes";;
		t) TOUCH="no-touch";;
	esac done
	shift $(($OPTIND - 1))
	verbose "Subtracting files from $PATCH_NAME {"
	for FILE; do
		get_filename_relative_to_root RELATIVE_NAME $FILE
		local BEFORE="$BEFORE_DIR/$RELATIVE_NAME"
		[ -e "$BEFORE" ] || die "$FILE is not in active patch"
		if diff -q "$BEFORE" "$FILE" > /dev/null; then
			restore_files_from_before $TOUCH $RELATIVE_NAME
		elif [[ "$DISCARD_IF_DIFFERENT" == "yes" ]]; then
			mv -f "$BEFORE" "$REPOSITORY/.backups/"
		elif [[ "$REVERT_IF_DIFFERENT" == "yes" ]]; then
			restore_files_from_before $TOUCH $RELATIVE_NAME
		else
			die "File $FILE has changed.  Use -r to revert; use -d to discard."
		fi
	done
	verbose "} done."
	terse $PATCH_NAME
}

function CMD_begin(){
	for NAME; do
		begin_patch $NAME
		PATCH_DB="$REPOSITORY/$NAME.d"
		prepend_line $NAME $STACK
	done
	verbose "Active patch is now $NAME"
	verbose "No files added yet"
	terse $NAME
}

function CMD_forget(){
	standard_variables # We don't actually need this, but it does some handy consistency checks
	diff -q $STACK $REVERTIBLE || internal_error "Repository is in an inconsistent state"
	local ARCHIVE=""
	OPTIND=0
	while getopts "a" option; do case $option in
		a) ARCHIVE=1;
		   [ -d $archive_dir ] || die "archive dir does not exist: $archive_dir"
		   shift;;
	esac done
	[ -n "$*" ] || die "Specify at least one patch to forget"
	for NAME; do
		local OLDEST=$(tail -1 $STACK)
		[[ "$NAME" == "$OLDEST" ]] || die "Given patch name doesn't match oldest patch $OLDEST"
		verbose "Forgetting $NAME {"
		remove_last_line $STACK
		remove_last_line $REVERTIBLE
		delete_patch_db $NAME
		local PATCH_FILE
		get_full_patch_file_name_for PATCH_FILE $NAME
		echo "# patman $MAJOR_VERSION.$MINOR_VERSION f" >> $PATCH_FILE
		if [ -n "$ARCHIVE" ]; then
			verbose "  Archiving"
			mv $PATCH_FILE $ARCHIVE_DIR
		fi
		verbose "} done."
	done
	terse $(tail -1 $STACK)
}

function CMD_archive(){
	[ -n "$*" ] || die "Specify at least one patch to archive"
	for NAME; do
		if patch_is_on_stack $NAME; then
			die "$NAME is on the stack - cannot archive"
		else
			local PATCH_FILE
			get_full_patch_file_name_for PATCH_FILE $NAME
			verbose "Moving $PATCH_FILE into $ARCHIVE_DIR"
			mv $PATCH_FILE $ARCHIVE_DIR
		fi
	done
}

function CMD_diff(){
	standard_variables
	diff_files_in_active_patch $* 3>&1
}

function CMD_view(){
	standard_variables
	for FILE; do # File names are relative to root
		local BEFORE="$BEFORE_DIR/$FILE"
		local AFTER="$AFTER_DIR/$FILE"
		[ -e "$BEFORE" ] || die "$FILE is not in active patch"
		[ -e "$AFTER" ]  || die "$AFTER not found"
		$DIFF_VIEWER $BEFORE_DIR/$FILE $AFTER_DIR/$FILE
	done
}

function CMD_discard(){
	[ -n "$*" ] || die "Specify at least one patch to discard"
	for NAME; do
		standard_variables
		if [[ "$NAME" == "$PATCH_NAME" ]]; then
			discard_top_patch
		else
			die "Given patch name doesn't match top patch $PATCH_NAME"
		fi
	done
	terse $(head -n1 $STACK)
}

function CMD_exec(){
	standard_variables
	pushdq $PATCH_ROOT
	find $(files_in_active_patch) -exec $* \;
	popdq
}

function CMD_files(){
	if [[ "$*" == "" ]]; then
		standard_variables
		files_in_active_patch
	else
		for NAME; do files_in_patchfile $PATCHFILE_DIR/$NAME$PATCHFILE_SUFFIX; done # TODO: Expand the patch name into a patchfile path.  Come to think of it, I should make a handy function for this.
	fi
}

function CMD_init(){
	if [ -e "$STACK" ]; then
		die "Stack file $STACK already exists"
	fi
	mkdir -p $REPOSITORY/.backups
	echo -n > $REVERTIBLE
	echo -n > $STACK
	echo -e "MAJOR_VERSION=$MAJOR_VERSION\nMINOR_VERSION=$MINOR_VERSION" > $REPOSITORY/info
	verbose "Initialized patch repository in $REPOSITORY"
	terse $REPOSITORY
}

function CMD_patches(){
	local VERBOSE="no"
	local FULL_FILE_NAMES="no"
	OPTIND=0
	while getopts "vl" Option; do case $Option in
		v) VERBOSE="yes";;
		l) FULL_FILE_NAMES="yes";; # Meant to be reminiscent of grep -l
	esac done
	shift $(($OPTIND - 1))
	local STOP_PATCH="$1"
	if [ -n "$STOP_PATCH" ]; then
		patch_is_on_stack "$STOP_PATCH" || die "Patch $STOP_PATCH is not on the stack"
	fi
	if diff -q $REVERTIBLE $STACK >/dev/null; then
		# Note that this is not formatted like the diff output, but the caller can tell by looking at the exit status of the patman command
		for PATCH in `cat $STACK`; do
			if [[ "$PATCH" == "$STOP_PATCH" ]]; then
				return 0
			elif [[ "$FULL_FILE_NAMES" == "yes" ]]; then
				get_full_patch_file_name_for PATCH_FILE $PATCH
				echo "$PATCH_FILE"
			else
				echo "$PATCH"
			fi
			if [[ "$VERBOSE" == "yes" ]]; then
				files_in_patchfile $PATCHFILE_DIR/$PATCH$PATCHFILE_SUFFIX | awk '{printf "   %s\n",$1}'
			fi
		done
	else
		if [ -n "$STOP_PATCH" ]; then
			diff -U$INF $STACK $REVERTIBLE | awk 'NR>3 { print }' | grep -B"$INF" -Fx " $STOP_PATCH" | head --lines=-1
		else
			diff -U$INF $STACK $REVERTIBLE | awk 'NR>3 { print }'
		fi
		return 1
	fi
}

function CMD_top(){
	standard_variables # For error checking
	head -n1 $REVERTIBLE
}

function CMD_pop(){
	local TOUCH="touch"
	local POP_ALL="no"
	OPTIND=0
	while getopts "at" Option; do case $Option in
		a) POP_ALL="yes";;
		t) TOUCH="no-touch";;
	esac done
	shift $(($OPTIND - 1))
	if [[ "$*" == "" ]]; then
		standard_variables # Redundant for POP_ALL, but we do it for additional error checking
		if [[ "$POP_ALL" == "yes" ]]; then
			for PATCH in `cat $STACK`; do
				standard_variables
				pop_top_patch $TOUCH
			done
		else
			pop_top_patch $TOUCH
		fi
	else
		[[ "$POP_ALL" != "yes" ]] || die "-a option is incompatible with explicit patch names.  Use one or the other"
		for NAME; do
			standard_variables
			PATCHES_TO_POP=`grep -B$INF -Fx $NAME $STACK` || die "No patch named $NAME on the stack"
			for PATCH in $PATCHES_TO_POP; do
				standard_variables
				pop_top_patch $TOUCH
			done
		done
		terse $(head -n1 $STACK)
	fi
}

function CMD_push(){
	common_options "N" $*
	shift $NUM_COMMON_OPTIONS
	[ -n "$*" ] || die "Specify at least one patch to push"
	for NAME; do
		if patch_is_on_stack $NAME; then
			verbose "$NAME is already on the stack"
		else
			PATCHFILE=$PATCHFILE_DIR/$NAME$PATCHFILE_SUFFIX
			[ -r "$PATCHFILE" ] || die "Can't find patch file $PATCHFILE"
			verbose "Pushing patch $NAME from file $PATCHFILE {"
			begin_patch $NAME ok_to_overwrite # Note: after this, we're sitting in the new patch's root dir by definition
			standard_variables incomplete_is_ok
			add_files_to_active_patch $(files_in_patchfile $PATCHFILE)
			patch --ignore-whitespace -p$PATH_STRIP < $PATCHFILE 1>&2 || die "Patch did not apply cleanly.  Use the \"stipulate\" or \"revert\" command before proceeding."
			chmod_files "+w"
			prepend_line $NAME $STACK
			verbose "} done."
		fi
	done
	terse $(head -n1 $STACK)
}

function CMD_apply(){
	common_options "N" $*
	shift $NUM_COMMON_OPTIONS
	[ -n "$*" ] || die "Specify at least one patch to apply"
	standard_variables
	for NAME; do
		PATCHFILE=$PATCHFILE_DIR/$NAME$PATCHFILE_SUFFIX
		[ -r "$PATCHFILE" ] || die "Can't find patch file $PATCHFILE"
		verbose "Applying patch $NAME from file $PATCHFILE {"
		add_files_to_active_patch $(files_in_patchfile $PATCHFILE | grep -vFx "`files_in_active_patch;echo`") # echo adds blank line so the grep command succeeds even if active patch has no files
		patch --ignore-whitespace -p$PATH_STRIP < $PATCHFILE 1>&2 || die "Patch did not apply cleanly.  Use the \"stipulate\" or \"revert\" command before proceeding."
		chmod_files "+w"
		verbose "} done."
	done
	terse $(head -n1 $STACK)
}

function CMD_revert(){
	standard_variables incomplete_is_ok
	local COMPLETE=""
	local TOUCH="touch"
	OPTIND=0
	while getopts "ct" Option; do case $Option in
		c) COMPLETE=1;;
		t) TOUCH="no-touch";;
	esac done
	shift $(($OPTIND - 1))
	[ -n "$*" ] || die "Specify at least one patch to revert"
	for NAME; do
		if [[ "$NAME" == "$PATCH_NAME" ]]; then
			if [[ "$PATCH_NAME" == $TOP_COMPLETED_PATCH_NAME ]]; then
				[ -n "$COMPLETE" ] || die "No incomplete patches on stack; use pop or revert -c instead" 
				remove_first_line $STACK
			fi
			# Patch is guaranteed incomplete at this point
			verbose "Reverting patch $PATCH_NAME {"
			restore_files_from_before $TOUCH `files_in_active_patch`
			remove_top_patch_db
			verbose "} done."
		else
			die "Given patch name doesn't match top patch $PATCH_NAME"
		fi
	done
	terse $(head -n1 $STACK)
}

function CMD_root(){
	standard_variables incomplete_is_ok
	echo $PATCH_ROOT
}

function CMD_repository(){
	standard_variables incomplete_is_ok
	echo $REPOSITORY
}

function CMD_save(){
	standard_variables
	save_top_patch
	terse $PATCH_NAME
}

function CMD_config(){
	echo "# Environment:"
	env | sort | grep '^PATMAN' || true
	echo "# Settings in effect:"
	echo "PATCHFILE_DIR=$PATCHFILE_DIR"
	echo "PATCHFILE_SUFFIX=$PATCHFILE_SUFFIX"
	echo "PATMANRC=$PATMANRC"
	echo "PATH_STRIP=$PATH_STRIP"
	echo "REPOSITORY=$REPOSITORY"
	echo "DIFF_VIEWER=$DIFF_VIEWER"
}

function CMD_stipulate(){
	standard_variables incomplete_is_ok
	[[ "$PATCH_NAME" != "$TOP_COMPLETED_PATCH_NAME" ]] || die "No incomplete patches on stack"
	[[ "$1" == "$PATCH_NAME" ]] || die "Given patch name doesn't match top patch $PATCH_NAME"
	cp $REVERTIBLE $STACK
	chmod_files "+w"
	verbose "All patches marked complete"
	terse $(head -n1 $STACK)
}

function CMD_blame(){
	die "blame command doesn't work yet"
	standard_variables
	set -x
	local BLAME_DIR="$REPOSITORY/$PATCH_NAME.d/blame"
	if [ -d "$BLAME_DIR" ]; then
		rm -rf $BLAME_DIR
	fi
	mkdir "$BLAME_DIR"
	for FILE_NAME; do
		BLAME_NAME="$BLAME_DIR/$FILE_NAME"
		mkdir -p $(dirname $BLAME_NAME)
		local PREV_PATCH=""
		local PREV_PREV_PATCH=""
		local PATCHES=`tac $STACK`
		for PATCH_NAME in `tac $STACK`; do
			if [ -r "$REPOSITORY/$PATCH_NAME.d/before/$FILE_NAME" ]; then
				if [ -z "$PREV_PATCH" ]; then
					# This is the oldest version we have; start the blame file from it
					cp "$REPOSITORY/$PATCH_NAME.d/before/$FILE_NAME" "$BLAME_NAME"
				else
					diff -u "$REPOSITORY/$PREV_PATCH.d/before/$FILE_NAME" "$REPOSITORY/$PATCH_NAME.d/before/$FILE_NAME" | apply_blame "$PREV_PREV_PATCH" "$PREV_PATCH" | patch "$BLAME_NAME"
				fi
				PREV_PREV_PATCH="$PREV_PATCH"
				PREV_PATCH="$PATCH_NAME"
			fi
		done
		if [ -n "PREV_PATCH" ]; then
			diff -u "$REPOSITORY/$PREV_PATCH.d/before/$FILE_NAME" "$PATCH_ROOT/$FILE_NAME" | apply_blame "$PREV_PREV_PATCH" "$PREV_PATCH" | patch "$BLAME_NAME"
		fi
		mv -f "$BLAME_NAME" "$PATCH_ROOT/$FILE_NAME.blame"
	done
	set +x
}

function CMD_capture(){
	standard_variables
	local STACK_FILE="$PATCHFILE_DIR/$1.stack"
	verbose "Capturing stack to $STACK_FILE {"
	cat $STACK > $STACK_FILE
	verbose "} done."
}

function CMD_shelve(){
	CMD_capture $*
	CMD_pop     -a
}

function CMD_revive(){
	OPTIND=0
	while getopts "p" Option; do case $Option in
		p) PARTIAL=1;; # revive on top of other patches
	esac done
	shift $(($OPTIND - 1))
	[ ! -s "$STACK" ] || [ -n "$PARTIAL" ] || die "Stack is not empty; use -p to revive on top of other patches"

	local STACK_FILE="$PATCHFILE_DIR/$1.stack"
	verbose "Reviving stack from $STACK_FILE {"
	CMD_push `tac $PATCHFILE_DIR/$1.stack | grep '^[^# ]'`
	verbose "} done."
}

function CMD_zip(){
	standard_variables
	local ZIP_NAME="$1"; shift
	[ -n "$ZIP_NAME" ] || die "Specify the name for the zip file"
	[ -z "$*" ]        || die "Specify just one name for the zip file"
	local ZIP_FILE="$PATCHFILE_DIR/$ZIP_NAME.zip"
	local PATCHES=`tac $STACK`
	verbose "Zipping stack to $ZIP_FILE {"
	CMD_pop -a
	pushdq $PATCHFILE_DIR
	for PATCH in $PATCHES; do
		zip "$ZIP_FILE" "$PATCH$PATCHFILE_SUFFIX"
	done
	popdq
	verbose "} done."
}

function CMD_unzip(){
	OPTIND=0
	while getopts "p" Option; do case $Option in
		p) PARTIAL=1;; # revive on top of other patches
	esac done
	shift $(($OPTIND - 1))
	[ ! -s "$STACK" ] || [ -n "$PARTIAL" ] || die "Stack is not empty; use -p to unzip on top of other patches"

	local ZIP_NAME="$1"; shift
	[ -n "$ZIP_NAME" ] || die "Specify the name for the zip file"
	[ -z "$*" ]        || die "Specify just one name for the zip file"
	local ZIP_FILE="$PATCHFILE_DIR/$ZIP_NAME.zip"

	local PATCHES=$(files_in_zipfile "$ZIP_FILE")
	verbose "Unzipping stack from $ZIP_FILE {"
	pushdq $PATCHFILE_DIR
	unzip $ZIP_FILE
	popdq
	for PATCH in $PATCHES; do
		CMD_push ${PATCH%.patch}
	done
	verbose "} done."
}

function CMD_complete(){
	local SHELL=$1; shift
	[[ "$SHELL" == "bash" ]] || die "Only bash shell expansion is supported"

	# Put this in your .bashrc :
	#
	# function complete_patman {
        #	COMPREPLY=(`patman complete bash $COMP_CWORD ${COMP_WORDS[@]}`)
	# }
	# complete -F complete_patman patman

	# Define a few variables to make this look like it's a bash completion function
	local COMP_CWORD=$1; shift
	local COMP_WORDS=($*)

	local STACK_FILE_SUFFIX=".stack"
	local COMMAND="${COMP_WORDS[1]}"
	local WORD="${COMP_WORDS[$COMP_CWORD]}"

	if [[ "$COMP_CWORD" == "1" ]]; then
		compgen -W "add apply archive begin capture config diff discard exec files forget init patches pop push repository revert revive root save shelve stipulate version" -- $WORD
	else
		case "$COMMAND" in
			add)
				compgen -o filenames -f $WORD;;
			view)
				standard_variables && files_in_active_patch | grep "^$WORD";;
			apply|files|push|archive)
				ls -d $PATCHFILE_DIR/$WORD*$PATCHFILE_SUFFIX 2> /dev/null | sed "s@^$PATCHFILE_DIR/@@; s@$PATCHFILE_SUFFIX\$@@" 2> /dev/null;;
			capture|shelve|revive)
				ls -d $PATCHFILE_DIR/$WORD*$STACK_FILE_SUFFIX 2> /dev/null | sed "s@^$PATCHFILE_DIR/@@; s@$STACK_FILE_SUFFIX\$@@" 2> /dev/null;;
			zip|unzip)
				ls -d $PATCHFILE_DIR/$WORD*.zip 2> /dev/null | sed "s@^$PATCHFILE_DIR/@@; s@.zip\$@@" 2> /dev/null;;
			pop|patches)
				grep "^$WORD" $STACK;; # Doesn't work if $WORD contains special regex characters
			discard)
				head -1 $STACK;;
			revert|stipulate)
				head -1 $REVERTIBLE;;
			forget)
				tail -1 $STACK;;

			begin|config|diff|exec|init|repository|root|save)
				# No completion
				;;
		esac
	fi
}

function CMD_split(){
	standard_variables
	local NEW_PATCH="$1"; shift
	[ -n "$NEW_PATCH" ] || die "Specify the name for the new patch"
	[ -z "$*" ]         || die "Specify just one new patch name"
	save_top_patch_file
	local FILES="`files_in_active_patch`"
	local OLD_BEFORE_DIR="$BEFORE_DIR"
	CMD_begin "$NEW_PATCH"
	standard_variables
	add_files_to_active_patch $FILES

	# Scary hack time
	local BACKUP_DIR="$REPOSITORY/.backups/split.d"
	rm -rf "$BACKUP_DIR" # I don't like "rm -rf $VARIABLE" generally, but this one should be safe enough
	mv "$BEFORE_DIR" "$BACKUP_DIR"
	cp -a "$OLD_BEFORE_DIR" "$BEFORE_DIR"

	chmod -R +w "$BEFORE_DIR" # Writeable so the user knows which files are ok to edit
}

###########################
##
##  Main logic
##

PATMANRC=${PATMANRC:-$HOME/.patmanrc}
[ -r "$PATMANRC" ] && . "$PATMANRC"

# Some basic variables for which you don't even need to call standard_variables
PATH_STRIP=${PATMAN_PATH_STRIP:-1} # -p option to patch
PATCHFILE_DIR=${PATMAN_PATCHFILE_DIR:-.} # This shouldn't be blank or weird things will happen
ARCHIVE_DIR=$PATCHFILE_DIR/archive
PATCHFILE_SUFFIX=${PATMAN_PATCHFILE_SUFFIX:-.patch}
EXTRA_DIFF_OPTS=${PATMAN_EXTRA_DIFF_OPTS:-}
DIFF_VIEWER=${PATMAN_DIFF_VIEWER:-vimdiff}
REPOSITORY=${PATMAN_REPOSITORY:-$HOME/.patman}
STACK="$REPOSITORY/stack"
REVERTIBLE="$REPOSITORY/revertible" # Patches that can be reverted by copying the contents of the "before" dir over top of the "after" dir.  TODO: Implement reverting of partially-applied patches

COMMAND=$1
shift || help_message

case $COMMAND in
	add)         CMD_add         $*;;
	apply)       CMD_apply       $*;;
	archive)     CMD_archive     $*;;
	begin)       CMD_begin       $*;;
	blame)       CMD_blame       $*;;
	capture)     CMD_capture     $*;;
	complete)    CMD_complete    $*;;
	config)      CMD_config      $*;;
	diff)        CMD_diff        $*;;
	discard)     CMD_discard     $*;;
	exec)        CMD_exec        $*;;
	files)       CMD_files       $*;;
	forget)      CMD_forget      $*;;
	init)        CMD_init        $*;;
	ls)          CMD_patches     $*;;
	patches)     CMD_patches     $*;;
	pop)         CMD_pop         $*;;
	push)        CMD_push        $*;;
	repository)  CMD_repository  $*;;
	revive)      CMD_revive      $*;;
	revert)      CMD_revert      $*;;
	root)        CMD_root        $*;;
	save)        CMD_save        $*;;
	shelve)      CMD_shelve      $*;;
	split)       CMD_split       $*;;
	stipulate)   CMD_stipulate   $*;;
	sub)         CMD_sub         $*;;
	top)         CMD_top         $*;;
	unzip)       CMD_unzip       $*;;
	view)        CMD_view        $*;;
	zip)         CMD_zip         $*;;


	version)   version      ;;
	-v)        version      ;;
	-version)  version      ;;
	--version) version      ;;
	*)         help_message ;;
esac


